{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AirConnect - Flight Booking System\n\n## Overview\n\nAirConnect is a modern flight booking platform built with a full-stack TypeScript architecture. The application features intelligent route optimization using graph algorithms (Dijkstra and A*), dynamic pricing with real-time demand factors, and an intuitive user interface. The system supports flight search, booking management, and administrative controls for pricing configuration.\n\nThe platform is designed as a monorepo with clear separation between client-side React application, server-side Express API, and shared type definitions. It implements modern web development practices including real-time WebSocket communication, comprehensive authentication, and responsive design.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management and caching\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **Maps Integration**: Leaflet for interactive route visualization\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints with rate limiting and CORS protection\n- **Real-time Communication**: WebSocket server for live updates and notifications\n- **Authentication**: JWT-based auth with access/refresh token pattern\n- **Security**: Helmet for security headers, bcrypt for password hashing\n\n### Database & ORM\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Migrations**: Drizzle Kit for schema management\n- **Schema**: Relational design with users, airports, routes, bookings, and pricing config\n\n### Core Business Logic\n- **Route Computing**: Graph algorithms (Dijkstra and A*) for optimal path finding\n- **Pricing Engine**: Dynamic fare calculation with demand factors, fuel costs, and taxes\n- **Booking System**: PNR generation and booking lifecycle management\n- **Admin Controls**: Real-time pricing configuration and system monitoring\n\n### Data Models\n- **Users**: Authentication and role-based access (user/admin)\n- **Airports**: Geographic data with IATA codes and coordinates\n- **Routes**: Bidirectional flight connections with distance calculations\n- **Bookings**: Complete booking records with fare breakdowns\n- **Price Configuration**: Dynamic pricing parameters for admin control\n\n### Authentication & Authorization\n- **JWT Tokens**: Access tokens (15min) and refresh tokens (7 days)\n- **Role-based Access**: User and admin roles with different permissions\n- **Session Management**: Secure token storage and automatic refresh\n- **Rate Limiting**: Protection against brute force attacks\n\n### Real-time Features\n- **WebSocket Integration**: Live booking notifications and price updates\n- **Activity Feeds**: Real-time admin dashboard with system events\n- **Price Monitoring**: Dynamic pricing updates based on demand\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **WebSocket (ws)**: Real-time bidirectional communication\n- **Leaflet**: Interactive mapping for route visualization\n\n### Authentication & Security\n- **bcrypt**: Secure password hashing\n- **jsonwebtoken**: JWT token generation and verification\n- **helmet**: Security middleware for Express\n- **express-rate-limit**: API rate limiting protection\n\n### Development & Build Tools\n- **Vite**: Fast development server and optimized production builds\n- **esbuild**: High-performance JavaScript bundler for server code\n- **TypeScript**: Static type checking across the entire codebase\n- **Drizzle Kit**: Database schema management and migrations\n\n### UI & Styling\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Consistent icon library\n- **Google Fonts**: Inter font family for typography\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **nanoid**: URL-safe unique ID generation\n- **clsx/tailwind-merge**: Conditional CSS class management\n- **class-variance-authority**: Component variant management","size_bytes":4446},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"#eff6ff\",\n          100: \"#dbeafe\",\n          500: \"#3b82f6\",\n          600: \"#2563eb\",\n          700: \"#1d4ed8\",\n          800: \"#1e40af\",\n          900: \"#1e3a8a\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        sky: {\n          400: \"#38bdf8\",\n          500: \"#0ea5e9\", \n          600: \"#0284c7\",\n        },\n        blue: {\n          50: \"#eff6ff\",\n          100: \"#dbeafe\",\n          500: \"#3b82f6\",\n          600: \"#2563eb\",\n          700: \"#1d4ed8\",\n          800: \"#1e40af\",\n          900: \"#1e3a8a\",\n        },\n        green: {\n          50: \"#f0fdf4\",\n          100: \"#dcfce7\",\n          500: \"#22c55e\",\n          600: \"#16a34a\",\n        },\n        orange: {\n          50: \"#fff7ed\",\n          100: \"#ffedd5\",\n          500: \"#f97316\",\n          600: \"#ea580c\",\n        },\n        purple: {\n          50: \"#faf5ff\",\n          100: \"#f3e8ff\",\n          500: \"#a855f7\",\n          600: \"#9333ea\",\n        },\n        gray: {\n          50: \"#f9fafb\",\n          100: \"#f3f4f6\",\n          200: \"#e5e7eb\",\n          300: \"#d1d5db\",\n          400: \"#9ca3af\",\n          500: \"#6b7280\",\n          600: \"#4b5563\",\n          700: \"#374151\",\n          800: \"#1f2937\",\n          900: \"#111827\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3941},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { \n  loginSchema, \n  registerSchema, \n  routeComputeSchema, \n  priceQuoteSchema,\n  insertBookingSchema,\n  insertPriceConfigSchema,\n  type RouteComputeInput, \n  type PriceQuoteInput \n} from \"@shared/schema\";\nimport { hashPassword, verifyPassword, generateTokens, verifyAccessToken } from \"./services/auth\";\nimport { computeRoute } from \"./services/graph\";\nimport { generatePriceQuote } from \"./services/pricing\";\nimport { generatePnr } from \"./utils/pnr\";\nimport rateLimit from \"express-rate-limit\";\nimport helmet from \"helmet\";\nimport cors from \"cors\";\n\n// Rate limiters\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: { message: \"Too many auth attempts, please try again later\" },\n});\n\nconst priceLimiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 20, // limit each IP to 20 requests per windowMs\n  message: { message: \"Too many pricing requests, please try again later\" },\n});\n\n// Auth middleware\ninterface AuthenticatedRequest extends Request {\n  user?: { userId: string; email: string; role: string };\n}\n\nasync function authenticate(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  const token = authHeader?.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\n  if (!token) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n\n  const payload = verifyAccessToken(token);\n  if (!payload) {\n    return res.status(401).json({ message: \"Invalid or expired token\" });\n  }\n\n  req.user = payload;\n  next();\n}\n\nasync function requireAdmin(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  if (req.user?.role !== \"admin\") {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n}\n\n// WebSocket clients for real-time updates\nconst wsClients = new Set<WebSocket>();\n\nfunction broadcastToClients(message: any) {\n  wsClients.forEach(ws => {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Security middleware\n  app.use(helmet());\n  app.use(cors({\n    origin: process.env.CLIENT_ORIGIN || \"http://localhost:5173\",\n    credentials: true,\n  }));\n\n  // Auth routes\n  app.post(\"/api/auth/register\", authLimiter, async (req, res) => {\n    try {\n      const { email, password, name } = registerSchema.parse(req.body);\n      \n      // Check if user exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Create user\n      const passwordHash = await hashPassword(password);\n      const user = await storage.createUser({\n        email,\n        passwordHash,\n        name,\n        role: \"user\",\n      });\n\n      const tokens = generateTokens(user);\n      res.json({ user: { id: user.id, email: user.email, name: user.name, role: user.role }, ...tokens });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", authLimiter, async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || !(await verifyPassword(password, user.passwordHash))) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const tokens = generateTokens(user);\n      res.json({ user: { id: user.id, email: user.email, name: user.name, role: user.role }, ...tokens });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const user = await storage.getUser(req.user!.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ id: user.id, email: user.email, name: user.name, role: user.role });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Airport routes\n  app.get(\"/api/airports\", async (req, res) => {\n    try {\n      const airports = await storage.getAllAirports();\n      res.json(airports);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch airports\" });\n    }\n  });\n\n  app.get(\"/api/airports/:code\", async (req, res) => {\n    try {\n      const airport = await storage.getAirportByCode(req.params.code.toUpperCase());\n      if (!airport) {\n        return res.status(404).json({ message: \"Airport not found\" });\n      }\n      res.json(airport);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch airport\" });\n    }\n  });\n\n  // Route computation\n  app.post(\"/api/route/compute\", async (req, res) => {\n    try {\n      const { from, to, algo } = routeComputeSchema.parse(req.body);\n      \n      const airports = await storage.getAllAirports();\n      const routes = await storage.getActiveRoutes();\n      \n      const result = await computeRoute(airports, routes, from, to, algo);\n      \n      if (!result) {\n        return res.status(404).json({ message: \"No route found\" });\n      }\n\n      // Broadcast route computation event\n      broadcastToClients({\n        type: \"route:recomputed\",\n        data: { from, to, algo, ...result }\n      });\n\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Route computation failed\" });\n    }\n  });\n\n  // Price quotes\n  app.post(\"/api/price/quote\", priceLimiter, async (req, res) => {\n    try {\n      const { path, pax } = priceQuoteSchema.parse(req.body);\n      \n      const config = await storage.getPriceConfig();\n      const routes = await storage.getActiveRoutes();\n      \n      // Calculate total distance\n      let totalDistance = 0;\n      for (let i = 0; i < path.length - 1; i++) {\n        const from = path[i];\n        const to = path[i + 1];\n        const route = routes.find(r => r.from === from && r.to === to);\n        if (route) {\n          totalDistance += route.distanceKm;\n        }\n      }\n\n      const offers = generatePriceQuote(path, totalDistance, pax, config);\n      res.json(offers);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Price quote failed\" });\n    }\n  });\n\n  // Booking routes\n  app.post(\"/api/bookings\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const pnr = generatePnr();\n      const bookingData = {\n        userId: req.user!.userId,\n        pnr,\n        path: req.body.path,\n        fareBreakdown: req.body.fareBreakdown,\n        total: req.body.total,\n        fareClass: req.body.fareClass,\n      };\n\n      const booking = await storage.createBooking(bookingData);\n\n      // Broadcast booking created event\n      broadcastToClients({\n        type: \"booking:created\",\n        data: {\n          pnr: booking.pnr,\n          userName: req.user!.email,\n          path: booking.path,\n          total: booking.total,\n        }\n      });\n\n      res.json({\n        bookingId: booking.id,\n        pnr: booking.pnr,\n        total: booking.total,\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Booking failed\" });\n    }\n  });\n\n  app.get(\"/api/bookings\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const bookings = await storage.getUserBookings(req.user!.userId);\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/pricing\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      const config = await storage.getPriceConfig();\n      res.json(config);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pricing config\" });\n    }\n  });\n\n  app.put(\"/api/admin/pricing\", authenticate, requireAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const updates = insertPriceConfigSchema.partial().parse(req.body);\n      const config = await storage.updatePriceConfig(updates);\n      \n      // Broadcast price update event\n      broadcastToClients({\n        type: \"price:update\",\n        data: { fuelPricePerLitre: config.fuelPricePerLitre }\n      });\n\n      res.json(config);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to update pricing\" });\n    }\n  });\n\n  app.get(\"/api/admin/stats\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      // In a real app, these would be actual database queries\n      const stats = {\n        totalUsers: 1247,\n        totalBookings: 583,\n        activeRoutes: 45,\n        revenueToday: \"₹2,45,680\"\n      };\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Create HTTP server\n  const httpServer = createServer(app);\n\n  // Setup WebSocket server\n  const wss = new WebSocketServer({ \n    server: httpServer, \n    path: '/ws' \n  });\n\n  wss.on('connection', (ws) => {\n    wsClients.add(ws);\n    \n    ws.on('close', () => {\n      wsClients.delete(ws);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      wsClients.delete(ws);\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":9661},"server/storage.ts":{"content":"import {\n  users,\n  airports,\n  routeEdges,\n  bookings,\n  priceConfig,\n  type User,\n  type InsertUser,\n  type Airport,\n  type InsertAirport,\n  type RouteEdge,\n  type InsertRouteEdge,\n  type Booking,\n  type InsertBooking,\n  type PriceConfig,\n  type InsertPriceConfig,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Airport operations\n  getAllAirports(): Promise<Airport[]>;\n  getAirportByCode(code: string): Promise<Airport | undefined>;\n  createAirport(airport: InsertAirport): Promise<Airport>;\n\n  // Route operations\n  getAllRoutes(): Promise<RouteEdge[]>;\n  getActiveRoutes(): Promise<RouteEdge[]>;\n  createRoute(route: InsertRouteEdge): Promise<RouteEdge>;\n\n  // Booking operations\n  getUserBookings(userId: string): Promise<Booking[]>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  getBookingByPnr(pnr: string): Promise<Booking | undefined>;\n\n  // Price config operations\n  getPriceConfig(): Promise<PriceConfig>;\n  updatePriceConfig(config: Partial<InsertPriceConfig>): Promise<PriceConfig>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Airport operations\n  async getAllAirports(): Promise<Airport[]> {\n    return await db.select().from(airports);\n  }\n\n  async getAirportByCode(code: string): Promise<Airport | undefined> {\n    const [airport] = await db.select().from(airports).where(eq(airports.code, code));\n    return airport;\n  }\n\n  async createAirport(insertAirport: InsertAirport): Promise<Airport> {\n    const [airport] = await db\n      .insert(airports)\n      .values(insertAirport)\n      .returning();\n    return airport;\n  }\n\n  // Route operations\n  async getAllRoutes(): Promise<RouteEdge[]> {\n    return await db.select().from(routeEdges);\n  }\n\n  async getActiveRoutes(): Promise<RouteEdge[]> {\n    return await db.select().from(routeEdges).where(eq(routeEdges.active, true));\n  }\n\n  async createRoute(insertRoute: InsertRouteEdge): Promise<RouteEdge> {\n    const [route] = await db\n      .insert(routeEdges)\n      .values(insertRoute)\n      .returning();\n    return route;\n  }\n\n  // Booking operations\n  async getUserBookings(userId: string): Promise<Booking[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.createdAt));\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const [booking] = await db\n      .insert(bookings)\n      .values({\n        userId: insertBooking.userId,\n        pnr: insertBooking.pnr,\n        path: insertBooking.path,\n        fareBreakdown: insertBooking.fareBreakdown,\n        total: insertBooking.total,\n        fareClass: insertBooking.fareClass,\n      })\n      .returning();\n    return booking;\n  }\n\n  async getBookingByPnr(pnr: string): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.pnr, pnr));\n    return booking;\n  }\n\n  // Price config operations\n  async getPriceConfig(): Promise<PriceConfig> {\n    let [config] = await db.select().from(priceConfig).where(eq(priceConfig.id, \"singleton\"));\n    \n    if (!config) {\n      // Create default config if it doesn't exist\n      [config] = await db\n        .insert(priceConfig)\n        .values({ id: \"singleton\" })\n        .returning();\n    }\n    \n    return config;\n  }\n\n  async updatePriceConfig(configUpdate: Partial<InsertPriceConfig>): Promise<PriceConfig> {\n    const [config] = await db\n      .update(priceConfig)\n      .set({ ...configUpdate, updatedAt: new Date() })\n      .where(eq(priceConfig.id, \"singleton\"))\n      .returning();\n    return config;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4394},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { \n  pgTable, \n  varchar, \n  text, \n  timestamp, \n  real, \n  integer, \n  boolean, \n  jsonb,\n  index\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  name: varchar(\"name\").notNull(),\n  role: varchar(\"role\").default(\"user\").notNull(), // \"user\" | \"admin\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Airports table\nexport const airports = pgTable(\"airports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 3 }).unique().notNull(),\n  name: varchar(\"name\").notNull(),\n  city: varchar(\"city\").notNull(),\n  country: varchar(\"country\").notNull(),\n  lat: real(\"lat\").notNull(),\n  lon: real(\"lon\").notNull(),\n}, (table) => [\n  index(\"idx_airport_code\").on(table.code),\n]);\n\n// Route edges table\nexport const routeEdges = pgTable(\"route_edges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  from: varchar(\"from\", { length: 3 }).notNull(),\n  to: varchar(\"to\", { length: 3 }).notNull(),\n  distanceKm: real(\"distance_km\").notNull(),\n  active: boolean(\"active\").default(true).notNull(),\n}, (table) => [\n  index(\"idx_route_from_to\").on(table.from, table.to),\n]);\n\n// Price configuration table\nexport const priceConfig = pgTable(\"price_config\", {\n  id: varchar(\"id\").primaryKey().default(\"singleton\"),\n  fuelPricePerLitre: real(\"fuel_price_per_litre\").default(95.50).notNull(),\n  defaultBurnLPerKm: real(\"default_burn_l_per_km\").default(1.62).notNull(),\n  taxRate: real(\"tax_rate\").default(0.18).notNull(),\n  feeRate: real(\"fee_rate\").default(0.08).notNull(),\n  baseFare: real(\"base_fare\").default(1500).notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Bookings table\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pnr: varchar(\"pnr\", { length: 8 }).unique().notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  path: jsonb(\"path\").$type<string[]>().notNull(),\n  fareBreakdown: jsonb(\"fare_breakdown\").$type<{\n    base: number;\n    fuelCost: number;\n    ops: number;\n    taxes: number;\n    demand: number;\n  }>().notNull(),\n  total: real(\"total\").notNull(),\n  fareClass: varchar(\"fare_class\").notNull(), // \"Saver\" | \"Standard\" | \"Flex\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_booking_user_date\").on(table.userId, table.createdAt),\n  index(\"idx_booking_pnr\").on(table.pnr),\n]);\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  bookings: many(bookings),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  user: one(users, {\n    fields: [bookings.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const routeEdgesRelations = relations(routeEdges, ({ one }) => ({\n  fromAirport: one(airports, {\n    fields: [routeEdges.from],\n    references: [airports.code],\n  }),\n  toAirport: one(airports, {\n    fields: [routeEdges.to],\n    references: [airports.code],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAirportSchema = createInsertSchema(airports).omit({\n  id: true,\n});\n\nexport const insertRouteEdgeSchema = createInsertSchema(routeEdges).omit({\n  id: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  pnr: true,\n  createdAt: true,\n});\n\nexport const insertPriceConfigSchema = createInsertSchema(priceConfig).omit({\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Airport = typeof airports.$inferSelect;\nexport type InsertAirport = z.infer<typeof insertAirportSchema>;\n\nexport type RouteEdge = typeof routeEdges.$inferSelect;\nexport type InsertRouteEdge = z.infer<typeof insertRouteEdgeSchema>;\n\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n\nexport type PriceConfig = typeof priceConfig.$inferSelect;\nexport type InsertPriceConfig = z.infer<typeof insertPriceConfigSchema>;\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const registerSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  name: z.string().min(2),\n});\n\nexport type LoginInput = z.infer<typeof loginSchema>;\nexport type RegisterInput = z.infer<typeof registerSchema>;\n\n// Route computation schemas\nexport const routeComputeSchema = z.object({\n  from: z.string().length(3),\n  to: z.string().length(3),\n  algo: z.enum([\"dijkstra\", \"astar\"]),\n});\n\nexport const priceQuoteSchema = z.object({\n  path: z.array(z.string().length(3)),\n  pax: z.number().int().positive(),\n});\n\nexport type RouteComputeInput = z.infer<typeof routeComputeSchema>;\nexport type PriceQuoteInput = z.infer<typeof priceQuoteSchema>;\n","size_bytes":5535},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Layout from \"@/components/Layout\";\nimport Landing from \"@/pages/Landing\";\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\nimport Home from \"@/pages/Home\";\nimport Search from \"@/pages/Search\";\nimport Offers from \"@/pages/Offers\";\nimport Bookings from \"@/pages/Bookings\";\nimport Admin from \"@/pages/Admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Landing />;\n  }\n\n  return <Layout>{children}</Layout>;\n}\n\nfunction PublicRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600\"></div>\n      </div>\n    );\n  }\n\n  if (isAuthenticated) {\n    return <ProtectedRoute><Home /></ProtectedRoute>;\n  }\n\n  return <>{children}</>;\n}\n\nfunction AdminRoute({ children }: { children: React.ReactNode }) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || user?.role !== \"admin\") {\n    return <NotFound />;\n  }\n\n  return <Layout>{children}</Layout>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <Home />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/login\">\n        <PublicRoute>\n          <Login />\n        </PublicRoute>\n      </Route>\n      \n      <Route path=\"/register\">\n        <PublicRoute>\n          <Register />\n        </PublicRoute>\n      </Route>\n      \n      <Route path=\"/search\">\n        <ProtectedRoute>\n          <Search />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/offers\">\n        <ProtectedRoute>\n          <Offers />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/bookings\">\n        <ProtectedRoute>\n          <Bookings />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin\">\n        <AdminRoute>\n          <Admin />\n        </AdminRoute>\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3222},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(220 100% 62%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(220 100% 62%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(220 100% 62%);\n  --chart-1: hsl(220 100% 62%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(220 100% 62%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(220 100% 62%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(220 100% 62%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 100% 62% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 100% 62% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 100% 62% / 0.00), 0px 1px 2px -1px hsl(220 100% 62% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 100% 62% / 0.00), 0px 1px 2px -1px hsl(220 100% 62% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 100% 62% / 0.00), 0px 2px 4px -1px hsl(220 100% 62% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 100% 62% / 0.00), 0px 4px 6px -1px hsl(220 100% 62% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 100% 62% / 0.00), 0px 8px 10px -1px hsl(220 100% 62% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 100% 62% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Primary color shades */\n  --primary-50: hsl(214 100% 97%);\n  --primary-100: hsl(214 95% 93%);\n  --primary-500: hsl(217 91% 60%);\n  --primary-600: hsl(221 83% 53%);\n  --primary-700: hsl(224 76% 48%);\n  --primary-800: hsl(226 71% 40%);\n  --primary-900: hsl(224 64% 33%);\n  \n  /* Sky color shades */\n  --sky-400: hsl(199 89% 48%);\n  --sky-500: hsl(198 93% 60%);\n  --sky-600: hsl(200 98% 39%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(220 100% 62%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(220 100% 62%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(220 100% 62%);\n  --chart-1: hsl(220 100% 62%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(220 100% 62%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(220 100% 62%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(220 100% 62%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Gradient background utility */\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(224 76% 48%) 0%, hsl(198 93% 60%) 100%);\n}\n\n/* Card hover effect */\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);\n}\n\n/* Leaflet map styling */\n.leaflet-container {\n  height: 400px;\n  width: 100%;\n  border-radius: 0.75rem;\n}\n","size_bytes":4654},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/seed/seed.ts":{"content":"import { storage } from \"../storage\";\nimport { haversineKm } from \"../utils/haversine\";\n\nconst airports = [\n  { code: \"DEL\", name: \"Indira Gandhi Intl\", city: \"Delhi\", country: \"India\", lat: 28.556, lon: 77.100 },\n  { code: \"BOM\", name: \"Chhatrapati Shivaji\", city: \"Mumbai\", country: \"India\", lat: 19.089, lon: 72.865 },\n  { code: \"BLR\", name: \"Kempegowda\", city: \"Bangalore\", country: \"India\", lat: 13.198, lon: 77.706 },\n  { code: \"HYD\", name: \"Rajiv Gandhi\", city: \"Hyderabad\", country: \"India\", lat: 17.24, lon: 78.43 },\n  { code: \"MAA\", name: \"Chennai Intl\", city: \"Chennai\", country: \"India\", lat: 12.99, lon: 80.17 },\n  { code: \"CCU\", name: \"Netaji Subhas Chandra\", city: \"Kolkata\", country: \"India\", lat: 22.65, lon: 88.44 },\n  { code: \"PNQ\", name: \"Pune\", city: \"Pune\", country: \"India\", lat: 18.58, lon: 73.92 },\n  { code: \"GOI\", name: \"Goa\", city: \"Goa\", country: \"India\", lat: 15.38, lon: 73.83 },\n  { code: \"AMD\", name: \"Ahmedabad\", city: \"Ahmedabad\", country: \"India\", lat: 23.07, lon: 72.63 },\n  { code: \"COK\", name: \"Cochin Intl\", city: \"Kochi\", country: \"India\", lat: 10.15, lon: 76.40 }\n];\n\nconst routePairs = [\n  [\"DEL\", \"BOM\"],\n  [\"DEL\", \"BLR\"],\n  [\"DEL\", \"CCU\"],\n  [\"BOM\", \"GOI\"],\n  [\"BOM\", \"PNQ\"],\n  [\"BOM\", \"AMD\"],\n  [\"BLR\", \"MAA\"],\n  [\"BLR\", \"HYD\"],\n  [\"HYD\", \"MAA\"],\n  [\"CCU\", \"MAA\"],\n  [\"MAA\", \"COK\"],\n];\n\nexport async function seedDatabase() {\n  console.log(\"Seeding airports...\");\n  \n  // Seed airports\n  for (const airport of airports) {\n    try {\n      await storage.createAirport(airport);\n      console.log(`Created airport: ${airport.code} - ${airport.name}`);\n    } catch (error) {\n      console.log(`Airport ${airport.code} already exists or error occurred`);\n    }\n  }\n\n  console.log(\"Seeding routes...\");\n  \n  // Seed routes\n  const airportMap = new Map(airports.map(a => [a.code, a]));\n  \n  for (const [from, to] of routePairs) {\n    const fromAirport = airportMap.get(from);\n    const toAirport = airportMap.get(to);\n    \n    if (fromAirport && toAirport) {\n      const distance = haversineKm(fromAirport, toAirport);\n      \n      try {\n        await storage.createRoute({\n          from,\n          to,\n          distanceKm: Math.round(distance),\n          active: true,\n        });\n        console.log(`Created route: ${from} → ${to} (${Math.round(distance)} km)`);\n      } catch (error) {\n        console.log(`Route ${from} → ${to} already exists or error occurred`);\n      }\n    }\n  }\n\n  console.log(\"Database seeding completed!\");\n}\n\n// Run seed if called directly\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase().catch(console.error);\n}\n","size_bytes":2770},"server/services/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { User } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || \"your-refresh-secret\";\n\nexport interface TokenPair {\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface JWTPayload {\n  userId: string;\n  email: string;\n  role: string;\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport function generateTokens(user: User): TokenPair {\n  const payload: JWTPayload = {\n    userId: user.id,\n    email: user.email,\n    role: user.role,\n  };\n\n  const accessToken = jwt.sign(payload, JWT_SECRET, { expiresIn: \"15m\" });\n  const refreshToken = jwt.sign(payload, JWT_REFRESH_SECRET, { expiresIn: \"7d\" });\n\n  return { accessToken, refreshToken };\n}\n\nexport function verifyAccessToken(token: string): JWTPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as JWTPayload;\n  } catch {\n    return null;\n  }\n}\n\nexport function verifyRefreshToken(token: string): JWTPayload | null {\n  try {\n    return jwt.verify(token, JWT_REFRESH_SECRET) as JWTPayload;\n  } catch {\n    return null;\n  }\n}\n","size_bytes":1366},"server/services/graph.ts":{"content":"import { RouteEdge, Airport } from \"@shared/schema\";\nimport { haversineKm } from \"../utils/haversine\";\n\nexport interface GraphNode {\n  code: string;\n  airport: Airport;\n}\n\nexport interface GraphEdge {\n  from: string;\n  to: string;\n  distance: number;\n}\n\nexport interface RouteResult {\n  path: string[];\n  segments: Array<{\n    from: string;\n    to: string;\n    distanceKm: number;\n  }>;\n  totalDistance: number;\n}\n\nexport class Graph {\n  private nodes: Map<string, GraphNode> = new Map();\n  private edges: Map<string, GraphEdge[]> = new Map();\n\n  constructor(airports: Airport[], routes: RouteEdge[]) {\n    // Add nodes\n    airports.forEach(airport => {\n      this.nodes.set(airport.code, {\n        code: airport.code,\n        airport,\n      });\n      this.edges.set(airport.code, []);\n    });\n\n    // Add edges\n    routes.forEach(route => {\n      if (route.active) {\n        const edge: GraphEdge = {\n          from: route.from,\n          to: route.to,\n          distance: route.distanceKm,\n        };\n        \n        this.edges.get(route.from)?.push(edge);\n        \n        // Add reverse edge for bidirectional routes\n        const reverseEdge: GraphEdge = {\n          from: route.to,\n          to: route.from,\n          distance: route.distanceKm,\n        };\n        this.edges.get(route.to)?.push(reverseEdge);\n      }\n    });\n  }\n\n  getNode(code: string): GraphNode | undefined {\n    return this.nodes.get(code);\n  }\n\n  getEdges(code: string): GraphEdge[] {\n    return this.edges.get(code) || [];\n  }\n\n  getAllNodes(): GraphNode[] {\n    return Array.from(this.nodes.values());\n  }\n\n  dijkstra(start: string, end: string): RouteResult | null {\n    const distances = new Map<string, number>();\n    const previous = new Map<string, string | null>();\n    const unvisited = new Set<string>();\n\n    // Initialize\n    this.nodes.forEach((_, node) => {\n      distances.set(node, Infinity);\n      previous.set(node, null);\n      unvisited.add(node);\n    });\n    distances.set(start, 0);\n\n    while (unvisited.size > 0) {\n      // Find unvisited node with minimum distance\n      let current: string | null = null;\n      let minDistance = Infinity;\n      \n      unvisited.forEach(node => {\n        const dist = distances.get(node)!;\n        if (dist < minDistance) {\n          minDistance = dist;\n          current = node;\n        }\n      });\n\n      if (!current || minDistance === Infinity) break;\n      if (current === end) break;\n\n      unvisited.delete(current);\n\n      // Update distances to neighbors\n      const edges = this.getEdges(current);\n      for (const edge of edges) {\n        if (!unvisited.has(edge.to)) continue;\n\n        const alt = distances.get(current)! + edge.distance;\n        if (alt < distances.get(edge.to)!) {\n          distances.set(edge.to, alt);\n          previous.set(edge.to, current);\n        }\n      }\n    }\n\n    return this.buildRouteResult(start, end, previous, distances);\n  }\n\n  astar(start: string, end: string): RouteResult | null {\n    const startNode = this.getNode(start);\n    const endNode = this.getNode(end);\n    \n    if (!startNode || !endNode) return null;\n\n    const gScore = new Map<string, number>();\n    const fScore = new Map<string, number>();\n    const previous = new Map<string, string | null>();\n    const openSet = new Set<string>([start]);\n    const closedSet = new Set<string>();\n\n    // Initialize\n    this.nodes.forEach((_, node) => {\n      gScore.set(node, Infinity);\n      fScore.set(node, Infinity);\n      previous.set(node, null);\n    });\n    \n    gScore.set(start, 0);\n    fScore.set(start, haversineKm(startNode.airport, endNode.airport));\n\n    while (openSet.size > 0) {\n      // Find node in openSet with lowest fScore\n      let current: string | null = null;\n      let minFScore = Infinity;\n      \n      openSet.forEach(node => {\n        const score = fScore.get(node)!;\n        if (score < minFScore) {\n          minFScore = score;\n          current = node;\n        }\n      });\n\n      if (!current) break;\n      if (current === end) break;\n\n      openSet.delete(current);\n      closedSet.add(current);\n\n      // Examine neighbors\n      const edges = this.getEdges(current);\n      for (const edge of edges) {\n        if (closedSet.has(edge.to)) continue;\n\n        const tentativeGScore = gScore.get(current)! + edge.distance;\n\n        if (!openSet.has(edge.to)) {\n          openSet.add(edge.to);\n        } else if (tentativeGScore >= gScore.get(edge.to)!) {\n          continue;\n        }\n\n        // This path is the best so far\n        previous.set(edge.to, current);\n        gScore.set(edge.to, tentativeGScore);\n        \n        const neighbor = this.getNode(edge.to)!;\n        const heuristic = haversineKm(neighbor.airport, endNode.airport);\n        fScore.set(edge.to, tentativeGScore + heuristic);\n      }\n    }\n\n    return this.buildRouteResult(start, end, previous, gScore);\n  }\n\n  private buildRouteResult(\n    start: string,\n    end: string,\n    previous: Map<string, string | null>,\n    distances: Map<string, number>\n  ): RouteResult | null {\n    if (distances.get(end) === Infinity) {\n      return null; // No path found\n    }\n\n    // Reconstruct path\n    const path: string[] = [];\n    let current: string | null = end;\n    \n    while (current !== null) {\n      path.unshift(current);\n      current = previous.get(current) || null;\n    }\n\n    // Build segments\n    const segments: Array<{ from: string; to: string; distanceKm: number }> = [];\n    let totalDistance = 0;\n\n    for (let i = 0; i < path.length - 1; i++) {\n      const from = path[i];\n      const to = path[i + 1];\n      \n      // Find the edge distance\n      const edges = this.getEdges(from);\n      const edge = edges.find(e => e.to === to);\n      const distance = edge?.distance || 0;\n\n      segments.push({\n        from,\n        to,\n        distanceKm: distance,\n      });\n      \n      totalDistance += distance;\n    }\n\n    return {\n      path,\n      segments,\n      totalDistance,\n    };\n  }\n}\n\nexport async function computeRoute(\n  airports: Airport[],\n  routes: RouteEdge[],\n  from: string,\n  to: string,\n  algorithm: \"dijkstra\" | \"astar\"\n): Promise<RouteResult | null> {\n  const graph = new Graph(airports, routes);\n  \n  if (algorithm === \"dijkstra\") {\n    return graph.dijkstra(from, to);\n  } else {\n    return graph.astar(from, to);\n  }\n}\n","size_bytes":6295},"server/services/pricing.ts":{"content":"import { PriceConfig } from \"@shared/schema\";\nimport { nanoid } from \"nanoid\";\n\nexport interface FareBreakdown {\n  base: number;\n  fuelCost: number;\n  ops: number;\n  taxes: number;\n  demand: number;\n}\n\nexport interface Offer {\n  offerId: string;\n  class: \"Saver\" | \"Standard\" | \"Flex\";\n  fareBreakdown: FareBreakdown;\n  totalFare: number;\n  currency: string;\n}\n\nfunction roundToNearest10(value: number): number {\n  return Math.round(value / 10) * 10;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(value, min), max);\n}\n\n// Simple demand factor calculation based on route popularity\n// In a real system, this would consider actual booking data\nfunction calculateDemandFactor(path: string[]): number {\n  // Simulate demand based on route length and common routes\n  const routeKey = path.join(\"-\");\n  const popularRoutes = [\"DEL-BOM\", \"BOM-DEL\", \"DEL-BLR\", \"BLR-DEL\"];\n  \n  let baseDemand = 1.0;\n  \n  if (popularRoutes.includes(routeKey)) {\n    baseDemand = 1.2; // Higher demand for popular routes\n  }\n  \n  // Add some randomness to simulate real-time demand\n  const randomFactor = 0.9 + Math.random() * 0.4; // 0.9 to 1.3\n  \n  return clamp(baseDemand * randomFactor, 0.9, 1.5);\n}\n\nexport function generatePriceQuote(\n  path: string[],\n  totalDistanceKm: number,\n  pax: number,\n  config: PriceConfig\n): Offer[] {\n  const base = config.baseFare;\n  const fuelCost = totalDistanceKm * config.defaultBurnLPerKm * config.fuelPricePerLitre;\n  const ops = config.feeRate * (base + fuelCost);\n  const taxes = config.taxRate * (base + fuelCost + ops);\n  const demand = calculateDemandFactor(path);\n  \n  const fareBreakdown: FareBreakdown = {\n    base,\n    fuelCost,\n    ops,\n    taxes,\n    demand,\n  };\n\n  const corePrice = (base + fuelCost + ops + taxes) * demand;\n\n  const classes = [\n    { name: \"Saver\", multiplier: 0.95 },\n    { name: \"Standard\", multiplier: 1.0 },\n    { name: \"Flex\", multiplier: 1.15 },\n  ] as const;\n\n  return classes.map((fareClass) => ({\n    offerId: nanoid(),\n    class: fareClass.name,\n    fareBreakdown,\n    totalFare: roundToNearest10(corePrice * fareClass.multiplier) * pax,\n    currency: \"INR\",\n  }));\n}\n","size_bytes":2175},"server/utils/haversine.ts":{"content":"export interface Coordinates {\n  lat: number;\n  lon: number;\n}\n\nexport function haversineKm(a: Coordinates, b: Coordinates): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (b.lat - a.lat) * Math.PI / 180;\n  const dLon = (b.lon - a.lon) * Math.PI / 180;\n  const lat1 = a.lat * Math.PI / 180;\n  const lat2 = b.lat * Math.PI / 180;\n  \n  const s = Math.sin(dLat / 2) ** 2 +\n    Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) ** 2;\n  \n  return 2 * R * Math.asin(Math.sqrt(s));\n}\n","size_bytes":507},"server/utils/pnr.ts":{"content":"export function generatePnr(): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  for (let i = 0; i < 8; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n","size_bytes":240},"client/src/components/AirportSearch.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Airport } from \"@/types\";\nimport { Search } from \"lucide-react\";\n\ninterface AirportSearchProps {\n  label: string;\n  value: string;\n  onChange: (code: string) => void;\n  placeholder?: string;\n}\n\nexport default function AirportSearch({\n  label,\n  value,\n  onChange,\n  placeholder,\n}: AirportSearchProps) {\n  const [query, setQuery] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  const { data: airports = [] } = useQuery<Airport[]>({\n    queryKey: [\"/api/airports\"],\n  });\n\n  const filteredAirports = airports.filter(\n    (airport) =>\n      airport.code.toLowerCase().includes(query.toLowerCase()) ||\n      airport.name.toLowerCase().includes(query.toLowerCase()) ||\n      airport.city.toLowerCase().includes(query.toLowerCase())\n  ).slice(0, 5);\n\n  useEffect(() => {\n    const airport = airports.find(a => a.code === value);\n    if (airport) {\n      setQuery(`${airport.code} - ${airport.city}`);\n    }\n  }, [value, airports]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newQuery = e.target.value;\n    setQuery(newQuery);\n    setShowSuggestions(true);\n  };\n\n  const handleSelectAirport = (airport: Airport) => {\n    setQuery(`${airport.code} - ${airport.city}`);\n    onChange(airport.code);\n    setShowSuggestions(false);\n  };\n\n  return (\n    <div className=\"relative\">\n      <Label className=\"block text-sm font-medium text-gray-700 mb-2\">\n        {label}\n      </Label>\n      <div className=\"relative\">\n        <Input\n          type=\"text\"\n          value={query}\n          onChange={handleInputChange}\n          onFocus={() => setShowSuggestions(true)}\n          onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n          placeholder={placeholder}\n          className=\"pr-10\"\n          data-testid={`input-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n        />\n        <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n          <Search className=\"w-5 h-5 text-gray-400\" />\n        </div>\n      </div>\n\n      {/* Suggestions dropdown */}\n      {showSuggestions && filteredAirports.length > 0 && (\n        <div className=\"absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-lg shadow-lg\">\n          {filteredAirports.map((airport) => (\n            <button\n              key={airport.code}\n              onClick={() => handleSelectAirport(airport)}\n              className=\"w-full p-3 text-left hover:bg-gray-50 border-b last:border-b-0 transition-colors\"\n              data-testid={`suggestion-${airport.code}`}\n            >\n              <div className=\"font-medium\">\n                {airport.code} - {airport.name}\n              </div>\n              <div className=\"text-sm text-gray-600\">{airport.city}</div>\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3017},"client/src/components/Layout.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  const { user, logout, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n\n  const navigation = [\n    { name: \"Search Flights\", href: \"/search\" },\n    { name: \"My Bookings\", href: \"/bookings\" },\n    ...(user?.role === \"admin\" ? [{ name: \"Admin\", href: \"/admin\" }] : []),\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation Header */}\n      <nav className=\"bg-white shadow-sm border-b sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Link href=\"/\" className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-sm\">AC</span>\n                </div>\n                <span className=\"text-xl font-bold text-gray-900\">AirConnect</span>\n              </Link>\n            </div>\n            \n            {isAuthenticated && (\n              <div className=\"hidden md:flex items-center space-x-8\">\n                {navigation.map((item) => (\n                  <Link\n                    key={item.name}\n                    href={item.href}\n                    className={`px-3 py-2 font-medium transition-colors ${\n                      location === item.href\n                        ? \"text-primary-600\"\n                        : \"text-gray-700 hover:text-primary-600\"\n                    }`}\n                  >\n                    {item.name}\n                  </Link>\n                ))}\n              </div>\n            )}\n\n            <div className=\"flex items-center space-x-4\">\n              {isAuthenticated && (\n                <div className=\"hidden md:flex items-center space-x-2 text-sm text-gray-600\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span>Live Updates Active</span>\n                </div>\n              )}\n              \n              {isAuthenticated ? (\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-sm text-gray-600\">Welcome, {user?.name}</span>\n                  <Button onClick={logout} variant=\"outline\">\n                    Sign Out\n                  </Button>\n                </div>\n              ) : (\n                <Link href=\"/login\">\n                  <Button>Sign In</Button>\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main>{children}</main>\n    </div>\n  );\n}\n","size_bytes":2869},"client/src/components/OfferCard.tsx":{"content":"import { Offer } from \"@/types\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport PriceBreakdown from \"@/components/PriceBreakdown\";\nimport { DollarSign, Star, Shield } from \"lucide-react\";\n\ninterface OfferCardProps {\n  offer: Offer;\n  onSelect: (offer: Offer) => void;\n}\n\nconst classIcons = {\n  Saver: DollarSign,\n  Standard: Star,\n  Flex: Shield,\n};\n\nconst classColors = {\n  Saver: \"orange\",\n  Standard: \"blue\",\n  Flex: \"purple\",\n};\n\nexport default function OfferCard({ offer, onSelect }: OfferCardProps) {\n  const Icon = classIcons[offer.class];\n  const color = classColors[offer.class];\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow duration-300\" data-testid={`offer-card-${offer.class.toLowerCase()}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`w-10 h-10 bg-${color}-100 rounded-full flex items-center justify-center`}>\n              <Icon className={`w-5 h-5 text-${color}-600`} />\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-gray-900\" data-testid={`text-class-${offer.class.toLowerCase()}`}>\n                {offer.class}\n              </h4>\n              <p className=\"text-sm text-gray-600\">\n                {offer.class === \"Saver\" && \"Basic fare\"}\n                {offer.class === \"Standard\" && \"Popular choice\"}\n                {offer.class === \"Flex\" && \"Full flexibility\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-2xl font-bold text-gray-900\" data-testid={`text-price-${offer.class.toLowerCase()}`}>\n              ₹{offer.totalFare.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-gray-500\">per person</div>\n          </div>\n        </div>\n\n        <PriceBreakdown fareBreakdown={offer.fareBreakdown} totalFare={offer.totalFare} />\n\n        <Button\n          onClick={() => onSelect(offer)}\n          className=\"w-full mt-4\"\n          data-testid={`button-select-${offer.class.toLowerCase()}`}\n        >\n          Select Flight\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2288},"client/src/components/PriceBreakdown.tsx":{"content":"import { FareBreakdown } from \"@/types\";\n\ninterface PriceBreakdownProps {\n  fareBreakdown: FareBreakdown;\n  totalFare: number;\n  showDemand?: boolean;\n}\n\nexport default function PriceBreakdown({ \n  fareBreakdown, \n  totalFare, \n  showDemand = false \n}: PriceBreakdownProps) {\n  return (\n    <div className=\"space-y-2 text-sm border-t pt-4\" data-testid=\"price-breakdown\">\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Base fare</span>\n        <span data-testid=\"text-base-fare\">₹{fareBreakdown.base.toLocaleString()}</span>\n      </div>\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Fuel charges</span>\n        <span data-testid=\"text-fuel-charges\">₹{Math.round(fareBreakdown.fuelCost).toLocaleString()}</span>\n      </div>\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Operations fee</span>\n        <span data-testid=\"text-ops-fee\">₹{Math.round(fareBreakdown.ops).toLocaleString()}</span>\n      </div>\n      <div className=\"flex justify-between\">\n        <span className=\"text-gray-600\">Taxes</span>\n        <span data-testid=\"text-taxes\">₹{Math.round(fareBreakdown.taxes).toLocaleString()}</span>\n      </div>\n      {showDemand && (\n        <div className=\"flex justify-between\">\n          <span className=\"text-gray-600\">Demand factor</span>\n          <span data-testid=\"text-demand-factor\">{fareBreakdown.demand.toFixed(2)}x</span>\n        </div>\n      )}\n      <div className=\"flex justify-between font-semibold pt-2 border-t\">\n        <span>Total</span>\n        <span data-testid=\"text-total-fare\">₹{totalFare.toLocaleString()}</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1698},"client/src/components/RouteMap.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Airport, RouteSegment } from \"@/types\";\n\ninterface RouteMapProps {\n  airports: Airport[];\n  path: string[];\n  segments?: RouteSegment[];\n  className?: string;\n}\n\ndeclare global {\n  interface Window {\n    L: any;\n  }\n}\n\nexport default function RouteMap({ airports, path, segments, className = \"h-96\" }: RouteMapProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n\n  useEffect(() => {\n    // Load Leaflet dynamically\n    if (!window.L) {\n      const link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = \"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\";\n      document.head.appendChild(link);\n\n      const script = document.createElement(\"script\");\n      script.src = \"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\";\n      script.onload = initializeMap;\n      document.head.appendChild(script);\n    } else {\n      initializeMap();\n    }\n\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (mapInstanceRef.current && airports.length > 0) {\n      updateMap();\n    }\n  }, [airports, path, segments]);\n\n  const initializeMap = () => {\n    if (!mapRef.current || !window.L) return;\n\n    // Initialize map centered on India\n    mapInstanceRef.current = window.L.map(mapRef.current).setView([20.5937, 78.9629], 5);\n\n    // Add tile layer\n    window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(mapInstanceRef.current);\n\n    updateMap();\n  };\n\n  const updateMap = () => {\n    if (!mapInstanceRef.current || !window.L) return;\n\n    // Clear existing markers and polylines\n    mapInstanceRef.current.eachLayer((layer: any) => {\n      if (layer instanceof window.L.Marker || layer instanceof window.L.Polyline) {\n        mapInstanceRef.current.removeLayer(layer);\n      }\n    });\n\n    // Add airport markers\n    airports.forEach((airport) => {\n      const marker = window.L.marker([airport.lat, airport.lon])\n        .addTo(mapInstanceRef.current)\n        .bindPopup(`<b>${airport.code}</b><br/>${airport.name}<br/>${airport.city}`);\n    });\n\n    // Add route polyline if path exists\n    if (path.length > 1) {\n      const routeCoords = path\n        .map((code) => {\n          const airport = airports.find((a) => a.code === code);\n          return airport ? [airport.lat, airport.lon] : null;\n        })\n        .filter(Boolean);\n\n      if (routeCoords.length > 1) {\n        window.L.polyline(routeCoords, {\n          color: '#3b82f6',\n          weight: 4,\n          opacity: 0.8\n        }).addTo(mapInstanceRef.current);\n\n        // Fit map to show the route\n        if (routeCoords.length > 0) {\n          const group = new window.L.featureGroup(\n            routeCoords.map(coord => window.L.marker(coord))\n          );\n          mapInstanceRef.current.fitBounds(group.getBounds().pad(0.1));\n        }\n      }\n    }\n  };\n\n  return (\n    <div \n      ref={mapRef} \n      className={`w-full rounded-xl border border-gray-200 ${className}`}\n      data-testid=\"route-map\"\n    />\n  );\n}\n","size_bytes":3234},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest, setTokens, logout as apiLogout } from \"@/lib/api\";\nimport { User, AuthResponse } from \"@/types\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: (credentials: { email: string; password: string }) =>\n      apiRequest(\"POST\", \"/auth/login\", credentials),\n    onSuccess: (data: AuthResponse) => {\n      setTokens(data.accessToken, data.refreshToken);\n      queryClient.setQueryData([\"/api/auth/me\"], data.user);\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: (userData: { email: string; password: string; name: string }) =>\n      apiRequest(\"POST\", \"/auth/register\", userData),\n    onSuccess: (data: AuthResponse) => {\n      setTokens(data.accessToken, data.refreshToken);\n      queryClient.setQueryData([\"/api/auth/me\"], data.user);\n    },\n  });\n\n  const logout = () => {\n    apiLogout();\n    queryClient.setQueryData([\"/api/auth/me\"], null);\n    queryClient.clear();\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login: loginMutation.mutate,\n    register: registerMutation.mutate,\n    logout,\n    loginLoading: loginMutation.isPending,\n    registerLoading: registerMutation.isPending,\n    loginError: loginMutation.error,\n    registerError: registerMutation.error,\n  };\n}\n","size_bytes":1560},"client/src/lib/api.ts":{"content":"import axios from \"axios\";\n\nconst API_BASE_URL = \"/api\";\n\n// Create axios instance\nexport const api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true,\n});\n\n// Token management\nlet accessToken: string | null = localStorage.getItem(\"accessToken\");\nlet refreshToken: string | null = localStorage.getItem(\"refreshToken\");\n\n// Request interceptor to add auth header\napi.interceptors.request.use((config) => {\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n});\n\n// Response interceptor for token refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry && refreshToken) {\n      originalRequest._retry = true;\n\n      try {\n        // Try to refresh token\n        const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {\n          refreshToken,\n        });\n\n        const { accessToken: newAccessToken } = response.data;\n        accessToken = newAccessToken;\n        localStorage.setItem(\"accessToken\", newAccessToken);\n\n        // Retry original request\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        // Refresh failed, redirect to login\n        logout();\n        window.location.href = \"/login\";\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Auth functions\nexport function setTokens(access: string, refresh: string) {\n  accessToken = access;\n  refreshToken = refresh;\n  localStorage.setItem(\"accessToken\", access);\n  localStorage.setItem(\"refreshToken\", refresh);\n}\n\nexport function logout() {\n  accessToken = null;\n  refreshToken = null;\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"refreshToken\");\n}\n\nexport function getAccessToken() {\n  return accessToken;\n}\n\n// API request wrapper for React Query\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown\n): Promise<any> {\n  const response = await api.request({\n    method,\n    url,\n    data,\n  });\n  return response.data;\n}\n","size_bytes":2208},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/socket.ts":{"content":"import { WebSocketMessage } from \"@/types\";\n\nclass SocketService {\n  private ws: WebSocket | null = null;\n  private listeners: Map<string, Array<(data: any) => void>> = new Map();\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n\n  connect() {\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n    this.ws = new WebSocket(wsUrl);\n\n    this.ws.onopen = () => {\n      console.log(\"WebSocket connected\");\n      this.reconnectAttempts = 0;\n    };\n\n    this.ws.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        this.handleMessage(message);\n      } catch (error) {\n        console.error(\"Failed to parse WebSocket message:\", error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log(\"WebSocket disconnected\");\n      this.attemptReconnect();\n    };\n\n    this.ws.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n    };\n  }\n\n  private handleMessage(message: WebSocketMessage) {\n    const listeners = this.listeners.get(message.type);\n    if (listeners) {\n      listeners.forEach(listener => listener(message.data));\n    }\n  }\n\n  private attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = Math.pow(2, this.reconnectAttempts) * 1000; // Exponential backoff\n      \n      setTimeout(() => {\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect();\n      }, delay);\n    }\n  }\n\n  on(eventType: string, callback: (data: any) => void) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, []);\n    }\n    this.listeners.get(eventType)!.push(callback);\n  }\n\n  off(eventType: string, callback: (data: any) => void) {\n    const listeners = this.listeners.get(eventType);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.listeners.clear();\n  }\n}\n\nexport const socketService = new SocketService();\n","size_bytes":2330},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/api\";\nimport { socketService } from \"@/lib/socket\";\nimport { PriceConfig } from \"@/types\";\nimport { \n  Users, \n  FileText, \n  MapPin, \n  DollarSign, \n  TrendingUp,\n  Clock,\n  Plane,\n  AlertCircle,\n  Settings\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [pricingForm, setPricingForm] = useState({\n    fuelPricePerLitre: 0,\n    baseFare: 0,\n    taxRate: 0,\n    feeRate: 0,\n    defaultBurnLPerKm: 0,\n  });\n\n  const [activityFeed, setActivityFeed] = useState<Array<{\n    id: string;\n    type: string;\n    message: string;\n    timestamp: Date;\n    color: string;\n  }>>([]);\n\n  // Fetch pricing configuration\n  const { data: priceConfig, isLoading: priceConfigLoading } = useQuery<PriceConfig>({\n    queryKey: [\"/api/admin/pricing\"],\n  });\n\n  // Fetch admin stats\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  // Default stats if not loaded\n  const defaultStats = {\n    totalUsers: 1247,\n    totalBookings: 583,\n    activeRoutes: 45,\n    revenueToday: \"₹2,45,680\"\n  };\n\n  // Update pricing mutation\n  const updatePricingMutation = useMutation({\n    mutationFn: (data: Partial<PriceConfig>) =>\n      apiRequest(\"PUT\", \"/admin/pricing\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Pricing Updated\",\n        description: \"Global pricing configuration has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pricing\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update pricing configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize form with current config\n  useEffect(() => {\n    if (priceConfig) {\n      setPricingForm({\n        fuelPricePerLitre: priceConfig.fuelPricePerLitre,\n        baseFare: priceConfig.baseFare,\n        taxRate: priceConfig.taxRate * 100, // Convert to percentage\n        feeRate: priceConfig.feeRate * 100, // Convert to percentage\n        defaultBurnLPerKm: priceConfig.defaultBurnLPerKm,\n      });\n    }\n  }, [priceConfig]);\n\n  // WebSocket for real-time updates\n  useEffect(() => {\n    socketService.connect();\n\n    const handlePriceUpdate = (data: any) => {\n      addToActivityFeed(\"price:update\", `Fuel price updated to ₹${data.fuelPricePerLitre}/L`, \"orange\");\n    };\n\n    const handleRouteRecomputed = (data: any) => {\n      addToActivityFeed(\"route:recomputed\", `Route computed: ${data.from} → ${data.to} using ${data.algo}`, \"blue\");\n    };\n\n    const handleBookingCreated = (data: any) => {\n      addToActivityFeed(\"booking:created\", `New booking: ${data.pnr} • ${data.path.join(\" → \")} • ₹${data.total}`, \"green\");\n    };\n\n    socketService.on(\"price:update\", handlePriceUpdate);\n    socketService.on(\"route:recomputed\", handleRouteRecomputed);\n    socketService.on(\"booking:created\", handleBookingCreated);\n\n    return () => {\n      socketService.off(\"price:update\", handlePriceUpdate);\n      socketService.off(\"route:recomputed\", handleRouteRecomputed);\n      socketService.off(\"booking:created\", handleBookingCreated);\n    };\n  }, []);\n\n  const addToActivityFeed = (type: string, message: string, color: string) => {\n    const activity = {\n      id: Date.now().toString(),\n      type,\n      message,\n      timestamp: new Date(),\n      color,\n    };\n    \n    setActivityFeed(prev => [activity, ...prev.slice(0, 9)]); // Keep only last 10 items\n  };\n\n  const handlePricingSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    updatePricingMutation.mutate({\n      fuelPricePerLitre: pricingForm.fuelPricePerLitre,\n      baseFare: pricingForm.baseFare,\n      taxRate: pricingForm.taxRate / 100, // Convert back to decimal\n      feeRate: pricingForm.feeRate / 100, // Convert back to decimal\n      defaultBurnLPerKm: pricingForm.defaultBurnLPerKm,\n    });\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setPricingForm(prev => ({\n      ...prev,\n      [name]: parseFloat(value) || 0\n    }));\n  };\n\n  if (priceConfigLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-8\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-admin-title\">\n          Admin Dashboard\n        </h1>\n        <p className=\"text-gray-600 mt-2\">Manage global settings and monitor system activity</p>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Users</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-total-users\">\n                  {(stats as any)?.totalUsers || defaultStats.totalUsers}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <FileText className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Bookings</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-total-bookings\">\n                  {(stats as any)?.totalBookings || defaultStats.totalBookings}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                <MapPin className=\"w-6 h-6 text-orange-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Active Routes</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-active-routes\">\n                  {(stats as any)?.activeRoutes || defaultStats.activeRoutes}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Revenue Today</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-revenue-today\">\n                  {(stats as any)?.revenueToday || defaultStats.revenueToday}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Pricing Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Settings className=\"w-5 h-5\" />\n              <span>Global Pricing Configuration</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handlePricingSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"fuelPricePerLitre\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Fuel Price per Litre (₹)\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"fuelPricePerLitre\"\n                    name=\"fuelPricePerLitre\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={pricingForm.fuelPricePerLitre}\n                    onChange={handleInputChange}\n                    className=\"pr-12\"\n                    data-testid=\"input-fuel-price\"\n                  />\n                  <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n                    <span className=\"text-gray-500 text-sm\">₹/L</span>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"baseFare\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Base Fare (₹)\n                </Label>\n                <Input\n                  id=\"baseFare\"\n                  name=\"baseFare\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={pricingForm.baseFare}\n                  onChange={handleInputChange}\n                  data-testid=\"input-base-fare\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"taxRate\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Tax Rate (%)\n                  </Label>\n                  <Input\n                    id=\"taxRate\"\n                    name=\"taxRate\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={pricingForm.taxRate}\n                    onChange={handleInputChange}\n                    data-testid=\"input-tax-rate\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"feeRate\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Operations Fee (%)\n                  </Label>\n                  <Input\n                    id=\"feeRate\"\n                    name=\"feeRate\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={pricingForm.feeRate}\n                    onChange={handleInputChange}\n                    data-testid=\"input-fee-rate\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"defaultBurnLPerKm\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Fuel Burn Rate (L/km)\n                </Label>\n                <Input\n                  id=\"defaultBurnLPerKm\"\n                  name=\"defaultBurnLPerKm\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={pricingForm.defaultBurnLPerKm}\n                  onChange={handleInputChange}\n                  data-testid=\"input-burn-rate\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={updatePricingMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-update-pricing\"\n              >\n                {updatePricingMutation.isPending ? \"Updating...\" : \"Update Pricing\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Live Activity Feed */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                <span>Live Activity</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span>Real-time</span>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\" data-testid=\"activity-feed\">\n              {activityFeed.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Clock className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <p>Waiting for activity...</p>\n                </div>\n              ) : (\n                activityFeed.map((activity) => (\n                  <div\n                    key={activity.id}\n                    className={`flex items-start space-x-3 p-3 bg-${activity.color}-50 rounded-lg`}\n                    data-testid={`activity-${activity.type}`}\n                  >\n                    <div className={`w-8 h-8 bg-${activity.color}-100 rounded-full flex items-center justify-center flex-shrink-0`}>\n                      {activity.type === \"booking:created\" && <FileText className={`w-4 h-4 text-${activity.color}-600`} />}\n                      {activity.type === \"route:recomputed\" && <Plane className={`w-4 h-4 text-${activity.color}-600`} />}\n                      {activity.type === \"price:update\" && <DollarSign className={`w-4 h-4 text-${activity.color}-600`} />}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-gray-900\">{activity.message}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {activity.timestamp.toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* System Status */}\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"w-5 h-5\" />\n            <span>System Status</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <div>\n                <p className=\"font-medium text-gray-900\">WebSocket</p>\n                <p className=\"text-sm text-gray-600\">Connected</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <div>\n                <p className=\"font-medium text-gray-900\">Database</p>\n                <p className=\"text-sm text-gray-600\">Operational</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <div>\n                <p className=\"font-medium text-gray-900\">API Services</p>\n                <p className=\"text-sm text-gray-600\">All systems operational</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16123},"client/src/pages/Bookings.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { socketService } from \"@/lib/socket\";\nimport { Booking } from \"@/types\";\nimport { CheckCircle, FileText, Download, Calendar, Plane } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function BookingsPage() {\n  const { toast } = useToast();\n\n  const { data: bookings = [], isLoading } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings\"],\n  });\n\n  useEffect(() => {\n    // Connect to WebSocket for booking notifications\n    socketService.connect();\n\n    const handleBookingCreated = (data: any) => {\n      toast({\n        title: \"Booking Confirmed!\",\n        description: `New booking created: ${data.pnr}`,\n      });\n    };\n\n    socketService.on(\"booking:created\", handleBookingCreated);\n\n    return () => {\n      socketService.off(\"booking:created\", handleBookingCreated);\n    };\n  }, [toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {[1, 2].map((i) => (\n              <div key={i} className=\"h-48 bg-gray-200 rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-page-title\">\n          My Bookings\n        </h1>\n        <p className=\"text-gray-600 mt-2\">Manage your flight reservations</p>\n      </div>\n\n      {bookings.length === 0 ? (\n        // Empty State\n        <div className=\"text-center py-12\">\n          <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <FileText className=\"w-12 h-12 text-gray-400\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\" data-testid=\"text-no-bookings\">\n            No bookings yet\n          </h3>\n          <p className=\"text-gray-600 mb-6\">Book your first flight to see it here</p>\n          <Link href=\"/search\">\n            <Button data-testid=\"button-search-flights\">\n              <Plane className=\"w-4 h-4 mr-2\" />\n              Search Flights\n            </Button>\n          </Link>\n        </div>\n      ) : (\n        // Booking Cards\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {bookings.map((booking) => (\n            <Card key={booking.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`booking-card-${booking.pnr}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <CheckCircle className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\" data-testid={`text-pnr-${booking.pnr}`}>\n                        PNR: {booking.pnr}\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">\n                        Booked on {new Date(booking.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                    Confirmed\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-3 mb-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Route</span>\n                    <span className=\"font-medium\" data-testid={`text-route-${booking.pnr}`}>\n                      {booking.path.join(\" → \")}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Fare Class</span>\n                    <span className=\"font-medium\">{booking.fareClass}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total Paid</span>\n                    <span className=\"font-medium text-primary-600\" data-testid={`text-total-${booking.pnr}`}>\n                      ₹{booking.total.toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1\"\n                    data-testid={`button-view-details-${booking.pnr}`}\n                  >\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    View Details\n                  </Button>\n                  <Button \n                    className=\"flex-1\"\n                    data-testid={`button-download-ticket-${booking.pnr}`}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download Ticket\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Recent Activity */}\n      {bookings.length > 0 && (\n        <div className=\"mt-12\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Recent Activity</h2>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                {bookings.slice(0, 3).map((booking) => (\n                  <div key={booking.id} className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <Calendar className=\"w-4 h-4 text-green-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        Booking confirmed for {booking.path.join(\" → \")}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">\n                        PNR: {booking.pnr} • {new Date(booking.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      ₹{booking.total.toLocaleString()}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6988},"client/src/pages/Home.tsx":{"content":"import { useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Plane, MapPin, Calendar, Clock } from \"lucide-react\";\nimport { socketService } from \"@/lib/socket\";\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  useEffect(() => {\n    // Connect to WebSocket for real-time updates\n    socketService.connect();\n\n    return () => {\n      socketService.disconnect();\n    };\n  }, []);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Welcome Section */}\n      <div className=\"bg-gradient-to-br from-primary-800 via-primary-600 to-sky-500 rounded-3xl p-8 mb-8 text-white\">\n        <div className=\"max-w-4xl\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-welcome\">\n            Welcome back, {user?.name}!\n          </h1>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Ready to explore new destinations? Let's find your next flight.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <Link href=\"/search\">\n              <Button size=\"lg\" className=\"bg-white text-primary-600 hover:bg-gray-100\" data-testid=\"button-search-flights\">\n                <Plane className=\"w-5 h-5 mr-2\" />\n                Search Flights\n              </Button>\n            </Link>\n            <Link href=\"/bookings\">\n              <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-primary-600\" data-testid=\"button-my-bookings\">\n                <Calendar className=\"w-5 h-5 mr-2\" />\n                My Bookings\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n        <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n          <Link href=\"/search\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center\">\n                  <Plane className=\"w-6 h-6 text-primary-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">New Search</h3>\n                  <p className=\"text-sm text-gray-600\">Find flights with our smart algorithms</p>\n                </div>\n              </div>\n            </CardContent>\n          </Link>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n          <Link href=\"/bookings\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">My Trips</h3>\n                  <p className=\"text-sm text-gray-600\">View and manage your bookings</p>\n                </div>\n              </div>\n            </CardContent>\n          </Link>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <MapPin className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">Route Explorer</h3>\n                <p className=\"text-sm text-gray-600\">Discover new destinations</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Features Highlight */}\n      <div className=\"bg-white rounded-2xl shadow-sm border border-gray-200 p-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n          Experience the Future of Flight Booking\n        </h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <Clock className=\"w-4 h-4 text-primary-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">Real-time Updates</h3>\n                <p className=\"text-gray-600\">Get instant notifications about price changes and booking confirmations</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <MapPin className=\"w-4 h-4 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">Interactive Maps</h3>\n                <p className=\"text-gray-600\">Visualize your route with detailed airport information and flight paths</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <Plane className=\"w-4 h-4 text-green-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">Smart Routing</h3>\n                <p className=\"text-gray-600\">Choose between Dijkstra and A* algorithms for optimal route planning</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                <Calendar className=\"w-4 h-4 text-purple-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">Flexible Booking</h3>\n                <p className=\"text-gray-600\">Multiple fare classes to suit your travel needs and budget</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6544},"client/src/pages/Landing.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Plane, MapPin, Calculator, Clock } from \"lucide-react\";\n\nexport default function Landing() {\n  const { isAuthenticated } = useAuth();\n\n  if (isAuthenticated) {\n    return <Link href=\"/search\" replace />;\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-br from-primary-800 via-primary-600 to-sky-500 text-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center\">\n                <span className=\"text-primary-600 font-bold text-2xl\">AC</span>\n              </div>\n            </div>\n            <h1 className=\"text-5xl md:text-6xl font-bold mb-6\" data-testid=\"text-hero-title\">\n              Welcome to AirConnect\n            </h1>\n            <p className=\"text-xl md:text-2xl text-blue-100 mb-8 max-w-3xl mx-auto\">\n              Advanced flight booking with intelligent route optimization and real-time pricing\n            </p>\n            <div className=\"space-x-4\">\n              <Link href=\"/login\">\n                <Button size=\"lg\" className=\"bg-white text-primary-600 hover:bg-gray-100\" data-testid=\"button-get-started\">\n                  Get Started\n                </Button>\n              </Link>\n              <Link href=\"/search\">\n                <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-primary-600\" data-testid=\"button-search-flights\">\n                  Search Flights\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Why Choose AirConnect?\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Experience the future of flight booking with our advanced algorithms and real-time updates\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <Card className=\"text-center hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Calculator className=\"w-6 h-6 text-primary-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  Smart Algorithms\n                </h3>\n                <p className=\"text-gray-600\">\n                  Choose between Dijkstra and A* algorithms for optimal route planning\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Clock className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  Real-time Updates\n                </h3>\n                <p className=\"text-gray-600\">\n                  Live pricing and availability updates through WebSocket connections\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <MapPin className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  Interactive Maps\n                </h3>\n                <p className=\"text-gray-600\">\n                  Visualize your route with detailed airport markers and flight paths\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Plane className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  Multiple Fare Classes\n                </h3>\n                <p className=\"text-gray-600\">\n                  Choose from Saver, Standard, or Flex fares to match your needs\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Ready to Find Your Perfect Flight?\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Join thousands of travelers who trust AirConnect for their flight booking needs\n          </p>\n          <Link href=\"/login\">\n            <Button size=\"lg\" data-testid=\"button-start-booking\">\n              Start Booking Now\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5850},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const { login, loginLoading, loginError } = useAuth();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.email || !formData.password) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    login(formData, {\n      onError: (error: any) => {\n        toast({\n          title: \"Login Failed\",\n          description: error.message || \"Invalid credentials\",\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-800 via-primary-600 to-sky-500 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <Card className=\"shadow-xl\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-white font-bold text-xl\">AC</span>\n              </div>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"text-login-title\">\n                Welcome Back\n              </h2>\n              <p className=\"text-gray-600\">Sign in to your AirConnect account</p>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"mt-8 space-y-6\">\n              <div>\n                <Label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Email address\n                </Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  placeholder=\"john.doe@example.com\"\n                  className=\"w-full\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Password\n                </Label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  required\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  placeholder=\"••••••••\"\n                  className=\"w-full\"\n                  data-testid=\"input-password\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={loginLoading}\n                className=\"w-full\"\n                data-testid=\"button-login\"\n              >\n                {loginLoading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Don't have an account?{\" \"}\n                <Link href=\"/register\" className=\"font-medium text-primary-600 hover:text-primary-500\" data-testid=\"link-register\">\n                  Create one here\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4055},"client/src/pages/Offers.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport PriceBreakdown from \"@/components/PriceBreakdown\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Offer } from \"@/types\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function OffersPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [selectedOffer, setSelectedOffer] = useState<Offer | null>(null);\n  const [passengerDetails, setPassengerDetails] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n  });\n\n  // In a real app, you'd get the offer from state management or URL params\n  // For now, we'll use mock data based on the selected offer type\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const offerId = urlParams.get(\"offerId\");\n    \n    if (offerId) {\n      // Mock offer data - in a real app, this would come from the search results\n      const mockOffer: Offer = {\n        offerId,\n        class: \"Standard\",\n        fareBreakdown: {\n          base: 1500,\n          fuelCost: 1840,\n          ops: 267,\n          taxes: 643,\n          demand: 1.0,\n        },\n        totalFare: 4725,\n        currency: \"INR\",\n      };\n      setSelectedOffer(mockOffer);\n    }\n  }, []);\n\n  const bookingMutation = useMutation({\n    mutationFn: (bookingData: any) =>\n      apiRequest(\"POST\", \"/bookings\", bookingData),\n    onSuccess: (data) => {\n      toast({\n        title: \"Booking Confirmed!\",\n        description: `Your booking has been confirmed. PNR: ${data.pnr}`,\n      });\n      setLocation(\"/bookings\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBooking = () => {\n    if (!selectedOffer) return;\n\n    if (!passengerDetails.firstName || !passengerDetails.lastName || !passengerDetails.email) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required passenger details.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    bookingMutation.mutate({\n      offerId: selectedOffer.offerId,\n      path: [\"DEL\", \"BOM\"], // Mock path - in real app, this would come from search results\n      fareBreakdown: selectedOffer.fareBreakdown,\n      total: selectedOffer.totalFare,\n      fareClass: selectedOffer.class,\n      passengerDetails,\n    });\n  };\n\n  if (!selectedOffer) {\n    return (\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">No offer selected</h1>\n          <Button onClick={() => setLocation(\"/search\")} data-testid=\"button-back-to-search\">\n            Back to Search\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation(\"/search\")}\n          className=\"mb-4\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2\" />\n          Back to Search\n        </Button>\n        <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-page-title\">\n          Confirm Your Booking\n        </h1>\n        <p className=\"text-gray-600 mt-2\">Delhi (DEL) → Mumbai (BOM) • {new Date().toLocaleDateString()}</p>\n      </div>\n\n      {/* Flight Summary */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Flight Summary</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Route</span>\n                <span className=\"font-medium\" data-testid=\"text-route\">DEL → BOM</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Distance</span>\n                <span className=\"font-medium\">1,138 km</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Algorithm</span>\n                <span className=\"font-medium\">Dijkstra (Shortest Path)</span>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Fare Class</span>\n                <span className=\"font-medium\" data-testid=\"text-fare-class\">{selectedOffer.class}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Flight Time</span>\n                <span className=\"font-medium\">2h 15m</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Passengers</span>\n                <span className=\"font-medium\">1 Adult</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Passenger Details */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Passenger Details</h2>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  value={passengerDetails.firstName}\n                  onChange={(e) => setPassengerDetails(prev => ({ ...prev, firstName: e.target.value }))}\n                  placeholder=\"John\"\n                  data-testid=\"input-first-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  value={passengerDetails.lastName}\n                  onChange={(e) => setPassengerDetails(prev => ({ ...prev, lastName: e.target.value }))}\n                  placeholder=\"Doe\"\n                  data-testid=\"input-last-name\"\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={passengerDetails.email}\n                  onChange={(e) => setPassengerDetails(prev => ({ ...prev, email: e.target.value }))}\n                  placeholder=\"john.doe@example.com\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={passengerDetails.phone}\n                  onChange={(e) => setPassengerDetails(prev => ({ ...prev, phone: e.target.value }))}\n                  placeholder=\"+91 98765 43210\"\n                  data-testid=\"input-phone\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Price Summary */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Price Breakdown</h2>\n          <PriceBreakdown \n            fareBreakdown={selectedOffer.fareBreakdown}\n            totalFare={selectedOffer.totalFare}\n            showDemand={true}\n          />\n        </CardContent>\n      </Card>\n\n      {/* Booking Actions */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <Button \n          variant=\"outline\"\n          onClick={() => setLocation(\"/search\")}\n          className=\"flex-1\"\n          data-testid=\"button-back-to-search\"\n        >\n          Back to Search\n        </Button>\n        <Button \n          onClick={handleBooking}\n          disabled={bookingMutation.isPending}\n          className=\"flex-1\"\n          data-testid=\"button-confirm-booking\"\n        >\n          {bookingMutation.isPending ? \"Processing...\" : \"Confirm Booking\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8709},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Register() {\n  const { register, registerLoading, registerError } = useAuth();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.password || !formData.confirmPassword) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Password Too Short\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    register({\n      name: formData.name,\n      email: formData.email,\n      password: formData.password,\n    }, {\n      onError: (error: any) => {\n        toast({\n          title: \"Registration Failed\",\n          description: error.message || \"Failed to create account\",\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-800 via-primary-600 to-sky-500 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <Card className=\"shadow-xl\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-white font-bold text-xl\">AC</span>\n              </div>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"text-register-title\">\n                Create Account\n              </h2>\n              <p className=\"text-gray-600\">Join AirConnect and start booking flights</p>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"mt-8 space-y-6\">\n              <div>\n                <Label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Full Name\n                </Label>\n                <Input\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  required\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  placeholder=\"John Doe\"\n                  className=\"w-full\"\n                  data-testid=\"input-name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Email address\n                </Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  placeholder=\"john.doe@example.com\"\n                  className=\"w-full\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Password\n                </Label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  required\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  placeholder=\"••••••••\"\n                  className=\"w-full\"\n                  data-testid=\"input-password\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Confirm Password\n                </Label>\n                <Input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  required\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                  placeholder=\"••••••••\"\n                  className=\"w-full\"\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={registerLoading}\n                className=\"w-full\"\n                data-testid=\"button-register\"\n              >\n                {registerLoading ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Already have an account?{\" \"}\n                <Link href=\"/login\" className=\"font-medium text-primary-600 hover:text-primary-500\" data-testid=\"link-login\">\n                  Sign in here\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5922},"client/src/pages/Search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport AirportSearch from \"@/components/AirportSearch\";\nimport RouteMap from \"@/components/RouteMap\";\nimport OfferCard from \"@/components/OfferCard\";\nimport { apiRequest } from \"@/lib/api\";\nimport { socketService } from \"@/lib/socket\";\nimport { Airport, RouteResult, Offer } from \"@/types\";\nimport { Search, Info } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function SearchPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [fromAirport, setFromAirport] = useState(\"\");\n  const [toAirport, setToAirport] = useState(\"\");\n  const [algorithm, setAlgorithm] = useState<\"dijkstra\" | \"astar\">(\"dijkstra\");\n  const [routeResult, setRouteResult] = useState<RouteResult | null>(null);\n  const [offers, setOffers] = useState<Offer[]>([]);\n  const [selectedOffer, setSelectedOffer] = useState<Offer | null>(null);\n\n  const { data: airports = [] } = useQuery<Airport[]>({\n    queryKey: [\"/api/airports\"],\n  });\n\n  const routeMutation = useMutation({\n    mutationFn: (data: { from: string; to: string; algo: \"dijkstra\" | \"astar\" }) =>\n      apiRequest(\"POST\", \"/route/compute\", data),\n    onSuccess: (data: RouteResult) => {\n      setRouteResult(data);\n      // Automatically get price quotes\n      priceMutation.mutate({ path: data.path, pax: 1 });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Route Computation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const priceMutation = useMutation({\n    mutationFn: (data: { path: string[]; pax: number }) =>\n      apiRequest(\"POST\", \"/price/quote\", data),\n    onSuccess: (data: Offer[]) => {\n      setOffers(data);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Price Quote Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    // Connect to WebSocket for real-time updates\n    socketService.connect();\n\n    const handlePriceUpdate = (data: any) => {\n      toast({\n        title: \"Price Update\",\n        description: `Fuel price updated to ₹${data.fuelPricePerLitre}/L. Prices may have changed.`,\n      });\n      \n      // Refresh price quotes if we have a route\n      if (routeResult) {\n        priceMutation.mutate({ path: routeResult.path, pax: 1 });\n      }\n    };\n\n    const handleRouteRecomputed = (data: any) => {\n      toast({\n        title: \"Route Recomputed\",\n        description: `Route from ${data.from} to ${data.to} using ${data.algo} algorithm.`,\n      });\n    };\n\n    socketService.on(\"price:update\", handlePriceUpdate);\n    socketService.on(\"route:recomputed\", handleRouteRecomputed);\n\n    return () => {\n      socketService.off(\"price:update\", handlePriceUpdate);\n      socketService.off(\"route:recomputed\", handleRouteRecomputed);\n    };\n  }, [routeResult, priceMutation, toast]);\n\n  const handleSearch = () => {\n    if (!fromAirport || !toAirport) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select both departure and destination airports.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (fromAirport === toAirport) {\n      toast({\n        title: \"Invalid Route\",\n        description: \"Departure and destination airports cannot be the same.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    routeMutation.mutate({ from: fromAirport, to: toAirport, algo: algorithm });\n  };\n\n  const handleOfferSelect = (offer: Offer) => {\n    setSelectedOffer(offer);\n    // Navigate to offers page with the selected offer\n    setLocation(`/offers?offerId=${offer.offerId}`);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-br from-primary-800 via-primary-600 to-sky-500 rounded-3xl p-8 mb-8 text-white\">\n        <div className=\"max-w-4xl\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-hero-title\">\n            Find Your Perfect Flight\n          </h1>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Advanced route optimization with real-time pricing\n          </p>\n          \n          {/* Search Form */}\n          <div className=\"bg-white rounded-2xl p-6 text-gray-900\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n              <div className=\"lg:col-span-2\">\n                <AirportSearch\n                  label=\"From\"\n                  value={fromAirport}\n                  onChange={setFromAirport}\n                  placeholder=\"Delhi (DEL)\"\n                />\n              </div>\n\n              <div className=\"lg:col-span-2\">\n                <AirportSearch\n                  label=\"To\"\n                  value={toAirport}\n                  onChange={setToAirport}\n                  placeholder=\"Mumbai (BOM)\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Algorithm\n                </label>\n                <Select value={algorithm} onValueChange={(value: \"dijkstra\" | \"astar\") => setAlgorithm(value)}>\n                  <SelectTrigger data-testid=\"select-algorithm\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"dijkstra\">Dijkstra (Shortest)</SelectItem>\n                    <SelectItem value=\"astar\">A* (Optimized)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"mt-6 flex justify-center\">\n              <Button \n                onClick={handleSearch}\n                disabled={routeMutation.isPending}\n                className=\"px-8 py-3\"\n                data-testid=\"button-search\"\n              >\n                <Search className=\"w-5 h-5 mr-2\" />\n                {routeMutation.isPending ? \"Searching...\" : \"Search Flights\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Results Section */}\n      {routeResult && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Map Section */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold text-gray-900\">Route Visualization</h3>\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span data-testid=\"text-route-info\">\n                      Route: {routeResult.path.join(\" → \")} ({Math.round(routeResult.totalDistance)} km)\n                    </span>\n                  </div>\n                </div>\n                \n                <RouteMap \n                  airports={airports}\n                  path={routeResult.path}\n                  segments={routeResult.segments}\n                />\n                \n                <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-2 text-sm text-blue-800\">\n                    <Info className=\"w-4 h-4\" />\n                    <span>\n                      <strong>Algorithm:</strong> {algorithm === \"dijkstra\" ? \"Dijkstra's shortest path\" : \"A* optimized search\"} • \n                      <strong> Distance:</strong> {Math.round(routeResult.totalDistance)} km • \n                      <strong> Flight Time:</strong> ~{Math.round(routeResult.totalDistance / 500 * 60)}m\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Flight Options */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-xl font-semibold text-gray-900\">Available Flights</h3>\n              {priceMutation.isPending && (\n                <div className=\"text-sm text-gray-600\">Loading prices...</div>\n              )}\n            </div>\n            \n            {offers.map((offer) => (\n              <OfferCard\n                key={offer.offerId}\n                offer={offer}\n                onSelect={handleOfferSelect}\n              />\n            ))}\n\n            {offers.length === 0 && !priceMutation.isPending && routeResult && (\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <p className=\"text-gray-600\">No flight options available for this route.</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!routeResult && !routeMutation.isPending && (\n        <div className=\"text-center py-12\">\n          <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Search className=\"w-12 h-12 text-gray-400\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Ready to Search</h3>\n          <p className=\"text-gray-600\">\n            Enter your departure and destination airports to find the best flight routes\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":9757},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface Airport {\n  id: string;\n  code: string;\n  name: string;\n  city: string;\n  country: string;\n  lat: number;\n  lon: number;\n}\n\nexport interface RouteSegment {\n  from: string;\n  to: string;\n  distanceKm: number;\n}\n\nexport interface RouteResult {\n  path: string[];\n  segments: RouteSegment[];\n  totalDistance: number;\n}\n\nexport interface FareBreakdown {\n  base: number;\n  fuelCost: number;\n  ops: number;\n  taxes: number;\n  demand: number;\n}\n\nexport interface Offer {\n  offerId: string;\n  class: \"Saver\" | \"Standard\" | \"Flex\";\n  fareBreakdown: FareBreakdown;\n  totalFare: number;\n  currency: string;\n}\n\nexport interface Booking {\n  id: string;\n  pnr: string;\n  userId: string;\n  path: string[];\n  fareBreakdown: FareBreakdown;\n  total: number;\n  fareClass: string;\n  createdAt: string;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\nexport interface PriceConfig {\n  id: string;\n  fuelPricePerLitre: number;\n  defaultBurnLPerKm: number;\n  taxRate: number;\n  feeRate: number;\n  baseFare: number;\n  updatedAt: string;\n}\n\nexport interface AuthResponse {\n  user: User;\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface WebSocketMessage {\n  type: \"price:update\" | \"route:recomputed\" | \"booking:created\";\n  data: any;\n}\n","size_bytes":1288},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}